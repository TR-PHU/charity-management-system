/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import connect_db.MyConnection;
import java.awt.Color;
import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.control.ScrollBar;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import models.Donation;
import models.Post;
import models.User;
import models.PostVolunteer;

/**
 *
 * @author PHUTRAN
 */
public class ProfileForm extends javax.swing.JFrame {
    User user = null;
    ArrayList<Donation> donations = new ArrayList<>();
    ArrayList<PostVolunteer> postVolunteers = new ArrayList<>(); 
    DefaultTableModel tableModelDonation;
    DefaultTableModel tableModelVolunteer;
    
    private static  int userId;    
    private static  String username = "";
    
    public ProfileForm(int userId, String username) {
        this.userId = userId;
        this.username = username;
        initComponents();
        
        this.setLocationRelativeTo(null);
        this.setTitle("Profile");
        btnSaveFullName.setVisible(false);
        btnSaveUsername.setVisible(false);
        
        loadInfoUser();
        loadTableDonations();
        loadTableVolunteerSignUp();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelHeader = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        lableHome1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        comboBoxDirection = new javax.swing.JComboBox<>();
        panelMain = new javax.swing.JPanel();
        imageLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        usernameField = new javax.swing.JTextField();
        fullNameField = new javax.swing.JTextField();
        btnSaveFullName = new javax.swing.JButton();
        btnSaveUsername = new javax.swing.JButton();
        panelChangePasswd = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        oldPasswdField = new javax.swing.JPasswordField();
        jLabel6 = new javax.swing.JLabel();
        newPasswdField = new javax.swing.JPasswordField();
        jLabel9 = new javax.swing.JLabel();
        retypePasswdField = new javax.swing.JPasswordField();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        moneyDonation = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableActivity = new javax.swing.JTable();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableDonation = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();
        comboxTitle = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelHeader.setBackground(new java.awt.Color(239, 202, 72));

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logo.jpg"))); // NOI18N
        jLabel11.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        lableHome1.setText("Trang chủ");
        lableHome1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel7.setText("Về chúng tôi");
        jLabel7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });

        comboBoxDirection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Quản lý hoạt động của bạn", "Đăng bài", "Đăng xuất" }));
        comboBoxDirection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxDirectionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelHeaderLayout = new javax.swing.GroupLayout(panelHeader);
        panelHeader.setLayout(panelHeaderLayout);
        panelHeaderLayout.setHorizontalGroup(
            panelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHeaderLayout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lableHome1)
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(comboBoxDirection, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80))
        );
        panelHeaderLayout.setVerticalGroup(
            panelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHeaderLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(panelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelHeaderLayout.createSequentialGroup()
                        .addGroup(panelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lableHome1)
                            .addComponent(jLabel7)
                            .addComponent(comboBoxDirection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16))))
        );

        panelMain.setBackground(new java.awt.Color(239, 202, 72));

        imageLabel.setText("image");
        imageLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        imageLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imageLabelMouseClicked(evt);
            }
        });

        jLabel1.setText("Họ và tên:");

        jLabel2.setText("Tên đăng nhập:");

        usernameField.setBackground(new java.awt.Color(239, 202, 72));
        usernameField.setText("Tên đăng nhập user");
        usernameField.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        usernameField.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        usernameField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                usernameFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                usernameFieldFocusLost(evt);
            }
        });
        usernameField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                usernameFieldMouseClicked(evt);
            }
        });

        fullNameField.setBackground(new java.awt.Color(239, 202, 72));
        fullNameField.setText("Họ và tên user");
        fullNameField.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        fullNameField.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        fullNameField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fullNameFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                fullNameFieldFocusLost(evt);
            }
        });
        fullNameField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fullNameFieldMouseClicked(evt);
            }
        });
        fullNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullNameFieldActionPerformed(evt);
            }
        });

        btnSaveFullName.setBackground(new java.awt.Color(16, 169, 218));
        btnSaveFullName.setForeground(new java.awt.Color(255, 255, 255));
        btnSaveFullName.setText("Save");
        btnSaveFullName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveFullNameActionPerformed(evt);
            }
        });

        btnSaveUsername.setBackground(new java.awt.Color(16, 169, 218));
        btnSaveUsername.setForeground(new java.awt.Color(255, 255, 255));
        btnSaveUsername.setText("Save");
        btnSaveUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveUsernameActionPerformed(evt);
            }
        });

        panelChangePasswd.setBackground(new java.awt.Color(239, 202, 72));
        panelChangePasswd.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel4.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(17, 205, 36));
        jLabel4.setText("Đổi mật khẩu");

        jLabel5.setText("Mẫu khẩu cũ:");

        oldPasswdField.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        oldPasswdField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                oldPasswdFieldFocusLost(evt);
            }
        });

        jLabel6.setText("Mật khẩu mới");

        newPasswdField.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        newPasswdField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                newPasswdFieldFocusLost(evt);
            }
        });
        newPasswdField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPasswdFieldActionPerformed(evt);
            }
        });

        jLabel9.setText("Xác nhận mật khẩu:");

        retypePasswdField.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jButton1.setBackground(new java.awt.Color(235, 35, 35));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("ĐỔI MẬT KHẨU");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelChangePasswdLayout = new javax.swing.GroupLayout(panelChangePasswd);
        panelChangePasswd.setLayout(panelChangePasswdLayout);
        panelChangePasswdLayout.setHorizontalGroup(
            panelChangePasswdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelChangePasswdLayout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addGroup(panelChangePasswdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(21, 21, 21)
                .addGroup(panelChangePasswdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(oldPasswdField, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelChangePasswdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(newPasswdField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                        .addComponent(retypePasswdField, javax.swing.GroupLayout.Alignment.TRAILING)))
                .addContainerGap(95, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelChangePasswdLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(189, 189, 189))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelChangePasswdLayout.createSequentialGroup()
                .addGap(235, 235, 235)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(170, 170, 170))
        );
        panelChangePasswdLayout.setVerticalGroup(
            panelChangePasswdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelChangePasswdLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelChangePasswdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(oldPasswdField, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(panelChangePasswdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newPasswdField, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(12, 12, 12)
                .addGroup(panelChangePasswdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(retypePasswdField, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(241, 11, 11));
        jLabel3.setText("Tài khoản");

        jLabel12.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(17, 205, 36));
        jLabel12.setText("Tổng tiền đã quyên góp:");

        moneyDonation.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        moneyDonation.setText("0");
        moneyDonation.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        jTabbedPane1.setForeground(new java.awt.Color(241, 11, 11));
        jTabbedPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        tableActivity.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Thời gian", "Mô tả", "Hoàn thành"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableActivity);
        if (tableActivity.getColumnModel().getColumnCount() > 0) {
            tableActivity.getColumnModel().getColumn(0).setResizable(false);
            tableActivity.getColumnModel().getColumn(1).setResizable(false);
            tableActivity.getColumnModel().getColumn(2).setResizable(false);
        }

        jTabbedPane1.addTab("Danh sách hoạt động tình nguyên đã tham gia", jScrollPane1);

        jTabbedPane2.setForeground(new java.awt.Color(241, 11, 11));

        tableDonation.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        tableDonation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tên dự án", "Số tiền quyên góp"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableDonation);
        if (tableDonation.getColumnModel().getColumnCount() > 0) {
            tableDonation.getColumnModel().getColumn(0).setResizable(false);
            tableDonation.getColumnModel().getColumn(1).setResizable(false);
        }

        jTabbedPane2.addTab("Số tiền quyên góp ", jScrollPane2);

        jLabel15.setText("Tên dự án:");

        comboxTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboxTitleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelMainLayout = new javax.swing.GroupLayout(panelMain);
        panelMain.setLayout(panelMainLayout);
        panelMainLayout.setHorizontalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainLayout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(panelChangePasswd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMainLayout.createSequentialGroup()
                                .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(12, 12, 12)
                                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelMainLayout.createSequentialGroup()
                                        .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnSaveUsername))
                                    .addGroup(panelMainLayout.createSequentialGroup()
                                        .addComponent(fullNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnSaveFullName))))
                            .addComponent(jTabbedPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panelMainLayout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(moneyDonation, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(80, 80, 80))
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(panelMainLayout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboxTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        panelMainLayout.setVerticalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(fullNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSaveFullName))
                        .addGap(12, 12, 12)
                        .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSaveUsername))))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelChangePasswd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(moneyDonation))
                .addGap(12, 12, 12)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(comboxTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(panelMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void loadInfoUser() { 
        PreparedStatement st;
        ResultSet rs;
        String query = "select * from users where id=?";
        
        if(userId == 0) { 
            query = "select * from users where username=?";
        }
        
        try {
            st = MyConnection.getConnection().prepareStatement(query);
            if(userId != 0) { 
                st.setString(1, String.valueOf(userId));
            } else { 
                st.setString(1, username);
            }
            rs = st.executeQuery();
            ImageIcon myImage = null;
            if(rs.next()) { 
                if(rs.getBlob(7) != null) { 
                    Blob avatarUser = rs.getBlob(7);
                    byte[] imageBytes = avatarUser.getBytes(1, (int) avatarUser.length());
                    myImage = new ImageIcon(imageBytes);
                } else { 
                    File nullAvatar = new File(System.getProperty("user.dir") + "/src/images/avatar-null.jpg");
                    String path = nullAvatar.getAbsolutePath();
                    myImage = new ImageIcon(path);
                }
                user = new User(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getInt(5), rs.getString(6), rs.getBlob(7), rs.getInt(8));
                fullNameField.setText(user.getFullName());
                usernameField.setText(user.getUsername());
                Image image = myImage.getImage();
                Image newImage = image.getScaledInstance(imageLabel.getWidth(), imageLabel.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon imageIcon = new ImageIcon(newImage);
                imageLabel.setIcon(imageIcon);
                } else { 
                    JOptionPane.showMessageDialog(null, "Unauthorize", "Access deny",2);
                    LoginForm loginForm = new LoginForm();
                    loginForm.setVisible(true);
                    loginForm.pack();
                    loginForm.setLocationRelativeTo(null);
                    loginForm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                    this.dispose();
            }
        } catch (SQLException ex) {
            Logger.getLogger(ProfileForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void loadTableDonations() { 
        tableModelDonation = (DefaultTableModel) tableDonation.getModel();
        String queryDonation = "select post.id, title, donate_money "+
                                "from posts as post " +
                                "left join  user_ref_posts as urp " +
                                "on post.id = urp.post_id " +
                                "left join users as user " +
                                "on urp.user_id = user.id " +
                                "where donate_money > 0 and " +
                                "user.id = " + user.getId();
        
        Statement statementDonation = null;
        
        try {
            statementDonation = MyConnection.getConnection().createStatement();

            ResultSet resultSet = statementDonation.executeQuery(queryDonation);
            
            while(resultSet.next()) { 
                Donation donation = new Donation(resultSet.getInt(1),resultSet.getString(2), resultSet.getDouble(3));
                donations.add(donation);
            }
            double totalMoney = 0;
            for (Donation donation : donations) {
                tableModelDonation.addRow(new Object[] { 
                    donation.getTitle(),
                    donation.getMoney(),
                });
                totalMoney += donation.getMoney();
            }
            DecimalFormat formatter = new DecimalFormat("#,###.00");
            moneyDonation.setText(formatter.format(totalMoney));
        } catch (SQLException ex) {
            Logger.getLogger(ProfileForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void loadTableVolunteerSignUp() { 
        String queryVolunteer = "select post_id, title, goal_people " +
                                "from posts as post " +
                                "inner join user_ref_posts as urp " +
                                "on post.id = urp.post_id " +
                                "inner join users as user " +
                                "on urp.user_id = user.id " +
                                "where (has_evaluated = '1' or has_evaluated = '0') and " +
                                "user.id = " + user.getId();
        Statement statementDonation = null;
        try {
            statementDonation = MyConnection.getConnection().createStatement();

            ResultSet resultSet = statementDonation.executeQuery(queryVolunteer);
            
            while(resultSet.next()) { 
                PostVolunteer postVolunteer = new PostVolunteer(resultSet.getInt(1),resultSet.getString(2), resultSet.getDouble(3));
                postVolunteers.add(postVolunteer);
            }
            
            for (PostVolunteer volunteer : postVolunteers) {
                comboxTitle.addItem(volunteer.getTitle());
            }
        } catch (SQLException ex) {
            Logger.getLogger(ProfileForm.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }
    
    public boolean checkUsername(String username,String oldUserName) {
        PreparedStatement st;
        ResultSet rs;
        boolean  usernameExist = false;
        
        String query = "select * from users where username = ?";
        
        try {
            st = MyConnection.getConnection().prepareStatement(query);
            st.setString(1, username);
            rs = st.executeQuery();
            
            if(rs.next() && !oldUserName.trim().equals(rs.getString(3))) {
                usernameExist = true;
                JOptionPane.showMessageDialog(null, "Tên đăng nhập đã được sử dụng. Hãy chọn một tên đăng nhập khác", "Username failed", 2);
                usernameField.setText(oldUserName);
                btnSaveUsername.setVisible(false);
            }
        } catch (SQLException ex) {
            Logger.getLogger(RegisterForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return usernameExist;
    }
    private void btnSaveUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveUsernameActionPerformed
        String oldUserName = user.getUsername();
        System.out.println(oldUserName);
        String username = usernameField.getText();

        if(username.trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Tên đăng nhập không được bỏ trống", "Invalid Username", 2);
        }
        else {
            if(!checkUsername(username,oldUserName)) {
                PreparedStatement st;

                String updateQuery = "update users set username=? where id=?";

                try {
                    st = MyConnection.getConnection().prepareStatement(updateQuery);
                    st.setString(1, username);
                    st.setString(2, String.valueOf(user.getId()));

                    int result = st.executeUpdate();
                    if(result == 1) {
                        JOptionPane.showMessageDialog(null, "Cập nhật tên đăng nhập thành công.", "Updated full name sucess", 2);
                    } else {
                        JOptionPane.showMessageDialog(null, "Có lỗi xảy ra. Cập nhật tên đăng nhập không thành công", "Error: Update full name failed",2);
                        usernameField.setText(oldUserName);
                    }
                    btnSaveUsername.setVisible(false);
                } catch (SQLException ex) {
                    Logger.getLogger(ProfileForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_btnSaveUsernameActionPerformed

    private void btnSaveFullNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveFullNameActionPerformed
        String fullName = fullNameField.getText();
        if(fullName.trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Họ và tên không được bỏ trống", "Invalid FullName", 2);
        } else {
            PreparedStatement st;
            String updateQuery = "update users set full_name=? where id=?";
            try {
                st = MyConnection.getConnection().prepareStatement(updateQuery);
                st.setString(1, fullName);
                st.setString(2, String.valueOf(user.getId()));

                int result = st.executeUpdate();
                if(result == 1) {
                    JOptionPane.showMessageDialog(null, "Cập nhật họ và tên thành công.", "Updated full name sucess", 2);
                } else {
                    JOptionPane.showMessageDialog(null, "Có lỗi xảy ra. Cập nhật họ và tên không thành công", "Error: Update full name failed",2);
                    fullNameField.setText(user.getFullName());
                }
                btnSaveFullName.setVisible(false);
            } catch (SQLException ex) {
                Logger.getLogger(ProfileForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnSaveFullNameActionPerformed

    private void fullNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fullNameFieldActionPerformed

    private void fullNameFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fullNameFieldMouseClicked
        btnSaveFullName.setVisible(true);
        fullNameField.setBackground(Color.white);
    }//GEN-LAST:event_fullNameFieldMouseClicked

    private void fullNameFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fullNameFieldFocusLost
        fullNameField.setBackground(new Color(239,202,72));
        btnSaveFullName.setVisible(false);
    }//GEN-LAST:event_fullNameFieldFocusLost

    private void fullNameFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fullNameFieldFocusGained
        btnSaveFullName.setVisible(true);
        fullNameField.setBackground(Color.white);
    }//GEN-LAST:event_fullNameFieldFocusGained

    private void usernameFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usernameFieldMouseClicked
        btnSaveUsername.setVisible(true);
        usernameField.setBackground(Color.white);
    }//GEN-LAST:event_usernameFieldMouseClicked

    private void usernameFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_usernameFieldFocusLost
        usernameField.setBackground(new Color(239,202,72));
        btnSaveUsername.setVisible(false);
    }//GEN-LAST:event_usernameFieldFocusLost

    private void newPasswdFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPasswdFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newPasswdFieldActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String oldPasswd = String.valueOf(oldPasswdField.getPassword());
        String newPasswd = String.valueOf(newPasswdField.getPassword());
        String retypePasswd = String.valueOf(retypePasswdField.getPassword());
        if(verifyEmptyChangePasswd(oldPasswd, newPasswd, retypePasswd)) {
            PreparedStatement st;

            String updateQuery = "update users set password=? where id=?";
                try {
                    st = MyConnection.getConnection().prepareStatement(updateQuery);
                    st.setString(1, newPasswd);
                    st.setString(2, String.valueOf(user.getId()));

                    int result = st.executeUpdate();
                    if(result == 1) {
                        JOptionPane.showMessageDialog(null, "Đổi mật khẩu thành công.", "Change password sucess", 2);
                    } else {
                        JOptionPane.showMessageDialog(null, "Có lỗi xảy ra. Đổi mật khẩu không thành công", "Error: Change password failed",2);
                    }
                    oldPasswdField.setText("");
                    newPasswdField.setText("");
                    retypePasswdField.setText("");
                } catch (SQLException ex) {
                    Logger.getLogger(ProfileForm.class.getName()).log(Level.SEVERE, null, ex);
                }
        } else { 
            return;
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void oldPasswdFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_oldPasswdFieldFocusLost
        String oldPasswd = String.valueOf(oldPasswdField.getPassword());
        if(oldPasswd.trim().equals("")) { 
            JOptionPane.showMessageDialog(null, "Trường mật khẩu đang trống", "Empty Old Password", 2);
        } else if(!checkCorrectPasswd(oldPasswd)) { 
            JOptionPane.showMessageDialog(null, "Sai mật khẩu. Vui lòng kiểm tra lại.", "Incorrect Password", 2);
            oldPasswdField.requestFocus();
        }
    }//GEN-LAST:event_oldPasswdFieldFocusLost

    private void newPasswdFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_newPasswdFieldFocusLost
    }//GEN-LAST:event_newPasswdFieldFocusLost

    private void comboxTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboxTitleActionPerformed
        tableModelVolunteer = (DefaultTableModel) tableActivity.getModel();
        tableModelVolunteer.setRowCount(0);
        String selectedItem = (String) comboxTitle.getSelectedItem();
        
        PostVolunteer postVolunteerSelected = findPostVolunteers(postVolunteers, selectedItem);
        
        PreparedStatement ps;
        ResultSet rs;
        String query = "select take_place,description, has_done from time_lines where pid=?";
        
        try {
            ps = MyConnection.getConnection().prepareStatement(query);
            ps.setInt(1, postVolunteerSelected.getId());
            rs = ps.executeQuery();
            while(rs.next()) { 
                tableModelVolunteer.addRow(new Object []{
                    rs.getString(1),
                    rs.getString(2),
                    rs.getInt(3) == 1 ? true : false,
                });
            } 
            return;
        } catch (SQLException ex) {
            Logger.getLogger(ProfileForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_comboxTitleActionPerformed

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel7MouseClicked

    private void imageLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageLabelMouseClicked
        String path = null;
        
        JFileChooser chooser = new JFileChooser();
        
        chooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        
        // File extension
        FileNameExtensionFilter extension = new FileNameExtensionFilter("*.images", "jpg","png","jpeg");
        chooser.addChoosableFileFilter(extension);
        
        int result = chooser.showSaveDialog(null);
        
        // Check if user select an image
        File selectedImage = chooser.getSelectedFile();
        String fileName = selectedImage.getName();
        if(fileName.endsWith(".jpg") || fileName.endsWith(".png") || fileName.endsWith(".jpeg") || fileName.endsWith(".JPG") || fileName.endsWith(".PNG") || fileName.endsWith(".JPEG")) { 
           if(result == JFileChooser.APPROVE_OPTION) { 
                path = selectedImage.getAbsolutePath();
                ImageIcon myImage = new ImageIcon(path);

                
                PreparedStatement ps;
                String queryChangeAvt = "update users set avatar = ? where id = ?"; 
                
               try {
                   ps = MyConnection.getConnection().prepareStatement(queryChangeAvt);
                    try {
                        InputStream imageUpload = new FileInputStream(new File(path));
                        ps.setBlob(1, imageUpload);                        
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(ProfileForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    ps.setInt(2, user.getId());
                    if(ps.executeUpdate() != 0) {
                        Image image = myImage.getImage();
                        Image newImage = image.getScaledInstance(imageLabel.getWidth(),imageLabel.getHeight(),Image.SCALE_SMOOTH);
                        ImageIcon imageIcon = new ImageIcon(newImage);
                        imageLabel.setIcon(imageIcon);
                        JOptionPane.showMessageDialog(null, "Thay đổi ảnh đại diện thành công", "Change avatar success", 2);
                    } else { 
                        JOptionPane.showMessageDialog(null, "Thay đổi ảnh đại diện không thành công", "Change avatart failed", 2);
                    }
               } catch (SQLException ex) {
                   Logger.getLogger(ProfileForm.class.getName()).log(Level.SEVERE, null, ex);
               }
                
            }
        } else { 
            JOptionPane.showMessageDialog(rootPane, "Vui lòng chỉ chọn ảnh");
        }
    }//GEN-LAST:event_imageLabelMouseClicked

    private void comboBoxDirectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxDirectionActionPerformed
        int index = comboBoxDirection.getSelectedIndex();

        if(index == 0) { 
            ManageUserPost manageUserPost = new ManageUserPost(user.getId());
            manageUserPost.setVisible(true);
            manageUserPost.pack();
            manageUserPost.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            this.dispose();
        } else if (index == 1) { 
            CreatePost createPostForm = new CreatePost(user.getId());
            createPostForm.setVisible(true);
            createPostForm.pack();
            createPostForm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            this.dispose();
        } else { 
            LoginForm loginForm = new LoginForm();
            loginForm.setVisible(true);
            loginForm.pack();
            loginForm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            this.dispose();
        }
    }//GEN-LAST:event_comboBoxDirectionActionPerformed

    private void usernameFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_usernameFieldFocusGained
        btnSaveUsername.setVisible(true);
        usernameField.setBackground(Color.WHITE);
    }//GEN-LAST:event_usernameFieldFocusGained
    public PostVolunteer findPostVolunteers(ArrayList<PostVolunteer> listVolunteer,String title) { 
        for (PostVolunteer postVolunteer : listVolunteer) {
            if(postVolunteer.getTitle().equals(title)) { 
                return postVolunteer; 
            }
        }
        return null;
    }
    public boolean verifyEmptyChangePasswd(String oldPasswd,String newPasswd,String retypePasswd) { 
        if (oldPasswd.trim().equals("") || newPasswd.trim().equals("") || retypePasswd.trim().equals("")) 
        { 
            JOptionPane.showMessageDialog(null, "Vui lòng điền đầy đủ thông tin", "Empty Fields", 2);
            return false;
        } else if(!newPasswd.equals(retypePasswd)) { 
            JOptionPane.showMessageDialog(null, "Mật khẩu nhập lại không khớp", "Confirm Passwd", 2);
            return false;
        }
        return true;
    }
    public boolean checkCorrectPasswd(String oldPasswd) {
        PreparedStatement st;
        ResultSet rs;
        if(!oldPasswd.trim().equals("")) { 
            String query = "select * from users where id = ?";

            try {
                st = MyConnection.getConnection().prepareStatement(query);
                st.setString(1, String.valueOf(user.getId()));
                rs = st.executeQuery();

                if(rs.next() && oldPasswd.equals(rs.getString(4))) { 
                    return true;
                } else {
                    return false;
                }
            } catch (SQLException ex) {
                Logger.getLogger(RegisterForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return false;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProfileForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProfileForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProfileForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProfileForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProfileForm(userId,username).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSaveFullName;
    private javax.swing.JButton btnSaveUsername;
    private javax.swing.JComboBox<String> comboBoxDirection;
    private javax.swing.JComboBox<String> comboxTitle;
    private javax.swing.JTextField fullNameField;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JLabel lableHome1;
    private javax.swing.JLabel moneyDonation;
    private javax.swing.JPasswordField newPasswdField;
    private javax.swing.JPasswordField oldPasswdField;
    private javax.swing.JPanel panelChangePasswd;
    private javax.swing.JPanel panelHeader;
    private javax.swing.JPanel panelMain;
    private javax.swing.JPasswordField retypePasswdField;
    private javax.swing.JTable tableActivity;
    private javax.swing.JTable tableDonation;
    private javax.swing.JTextField usernameField;
    // End of variables declaration//GEN-END:variables
}
