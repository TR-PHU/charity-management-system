/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import connect_db.MyConnection;
import java.awt.Component;
import java.awt.Image;
import java.io.File;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import models.Donation;
import models.PostVolunteer;
import models.TimeLine;
import models.User;

/**
 *
 * @author PHUTRAN
 */
public class ManageUserPost extends javax.swing.JFrame {

    /**
     * Creates new form ManagePostUser
     */
    private static User user;
    ArrayList<Donation> listDonations = new ArrayList<>();
    ArrayList<PostVolunteer> listPostVolunteers = new ArrayList<>();
    ArrayList<TimeLine> listTimeLines = new ArrayList<>();
    
    public ManageUserPost(int userId) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("Quản lý hoạt động");
        btnDeleteDonationPost.setVisible(false);
        btnDeletePostVolunteer.setVisible(false);
        raiseDonationField.setEnabled(false);
        raisePeopleField.setEnabled(false);
        peopleDonatedField.setEnabled(false);
        
        goalDonationField.setEnabled(false);
        goalPeopleField.setEnabled(false);
        
        loadLogo();
        loadInfoUser(userId);
        loadTitleDonation();
        loadTitleVolunteer();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelHeader = new javax.swing.JPanel();
        labelLogo = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        panelMain = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        comboBoxTitleDonation = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableDonation = new javax.swing.JTable();
        goalDonationField = new javax.swing.JTextField();
        raiseDonationField = new javax.swing.JTextField();
        peopleDonatedField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        btnDeleteDonationPost = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        comboBoxTitleVolunteer = new javax.swing.JComboBox<>();
        btnDeletePostVolunteer = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        goalPeopleField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        raisePeopleField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablePeopleVolunteerSignUp = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableTimeLine = new javax.swing.JTable();
        comboBoxDirection = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelHeader.setBackground(new java.awt.Color(189, 213, 234));

        labelLogo.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        labelLogo.setText("jLabel1");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel1.setText("Về chúng tôi");
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel2.setText("Trang chủ");
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        panelMain.setBackground(new java.awt.Color(189, 213, 234));

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(241, 11, 11));
        jLabel3.setText("Danh sách các hoạt động kêu gọi từ thiện");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel4.setText("Tên dự án:");

        comboBoxTitleDonation.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        comboBoxTitleDonation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxTitleDonationActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel5.setText("Số tiền huy động:");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel6.setText("Số tiền đã quyên góp:");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel7.setText("Số người đã quyên góp:");

        tableDonation.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        tableDonation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Họ và tên người quyên góp", "Số tiền"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableDonation);
        if (tableDonation.getColumnModel().getColumnCount() > 0) {
            tableDonation.getColumnModel().getColumn(0).setResizable(false);
            tableDonation.getColumnModel().getColumn(1).setResizable(false);
        }

        goalDonationField.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        raiseDonationField.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(241, 11, 11));
        jLabel8.setText("Danh sách các hoạt động tình nguyện viên");

        btnDeleteDonationPost.setBackground(new java.awt.Color(255, 0, 0));
        btnDeleteDonationPost.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        btnDeleteDonationPost.setForeground(new java.awt.Color(255, 255, 255));
        btnDeleteDonationPost.setText("X");
        btnDeleteDonationPost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteDonationPostActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel9.setText("Tên dự án:");

        comboBoxTitleVolunteer.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        comboBoxTitleVolunteer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxTitleVolunteerActionPerformed(evt);
            }
        });

        btnDeletePostVolunteer.setBackground(new java.awt.Color(255, 0, 0));
        btnDeletePostVolunteer.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        btnDeletePostVolunteer.setForeground(new java.awt.Color(255, 255, 255));
        btnDeletePostVolunteer.setText("X");
        btnDeletePostVolunteer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePostVolunteerActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel10.setText("Số người huy động:");

        goalPeopleField.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel11.setText("Số người đã đăng ký:");

        raisePeopleField.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        tablePeopleVolunteerSignUp.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        tablePeopleVolunteerSignUp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UserID", "Họ và tên người đã đăng ký", "Đánh giá"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablePeopleVolunteerSignUp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablePeopleVolunteerSignUpMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablePeopleVolunteerSignUp);
        if (tablePeopleVolunteerSignUp.getColumnModel().getColumnCount() > 0) {
            tablePeopleVolunteerSignUp.getColumnModel().getColumn(0).setResizable(false);
            tablePeopleVolunteerSignUp.getColumnModel().getColumn(1).setResizable(false);
            tablePeopleVolunteerSignUp.getColumnModel().getColumn(2).setResizable(false);
        }

        tableTimeLine.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        tableTimeLine.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Thời gian", "Mô tả", "Hoàn thành"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableTimeLine.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableTimeLineMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tableTimeLine);
        if (tableTimeLine.getColumnModel().getColumnCount() > 0) {
            tableTimeLine.getColumnModel().getColumn(0).setResizable(false);
            tableTimeLine.getColumnModel().getColumn(1).setResizable(false);
            tableTimeLine.getColumnModel().getColumn(2).setResizable(false);
            tableTimeLine.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout panelMainLayout = new javax.swing.GroupLayout(panelMain);
        panelMain.setLayout(panelMainLayout);
        panelMainLayout.setHorizontalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel3)
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelMainLayout.createSequentialGroup()
                                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(28, 28, 28)
                                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(comboBoxTitleDonation, 0, 313, Short.MAX_VALUE)
                                    .addComponent(goalDonationField)
                                    .addComponent(raiseDonationField)
                                    .addComponent(peopleDonatedField)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelMainLayout.createSequentialGroup()
                                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE))
                                .addGap(40, 40, 40)
                                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comboBoxTitleVolunteer, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(goalPeopleField)
                                    .addComponent(raisePeopleField)))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDeleteDonationPost)
                            .addComponent(btnDeletePostVolunteer))))
                .addGap(30, 30, 30))
        );
        panelMainLayout.setVerticalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel3)
                .addGap(11, 11, 11)
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(comboBoxTitleDonation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteDonationPost))
                .addGap(12, 12, 12)
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(goalDonationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(raiseDonationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(peopleDonatedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel8)
                .addGap(8, 8, 8)
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(comboBoxTitleVolunteer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeletePostVolunteer))
                .addGap(12, 12, 12)
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(goalPeopleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(raisePeopleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        comboBoxDirection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Xem tài khoản của bạn", "Đăng bài", "Đăng xuất" }));
        comboBoxDirection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxDirectionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelHeaderLayout = new javax.swing.GroupLayout(panelHeader);
        panelHeader.setLayout(panelHeaderLayout);
        panelHeaderLayout.setHorizontalGroup(
            panelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHeaderLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(labelLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(20, 20, 20)
                .addComponent(comboBoxDirection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
            .addComponent(panelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelHeaderLayout.setVerticalGroup(
            panelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHeaderLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(panelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(comboBoxDirection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addComponent(panelMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxTitleDonationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxTitleDonationActionPerformed
        DecimalFormat formatter = new DecimalFormat("#,###.00");
        
        raiseDonationField.setText("0");
        peopleDonatedField.setText("0");
        
        DefaultTableModel tableModelDonation = (DefaultTableModel) tableDonation.getModel();
        tableModelDonation.setRowCount(0);
        
        String itemSelected = (String) comboBoxTitleDonation.getSelectedItem();
        Donation donationSelected = findDonationSelected(listDonations, itemSelected);

        goalDonationField.setText(formatter.format(donationSelected.getMoney()));
        
        PreparedStatement ps;
        ResultSet rs;
        String query = "select post.goal_money, post.raise_money, user.full_name, urp.donate_money " +
                        "from posts as post " +
                        "inner join user_ref_posts as urp " +
                        "on post.id = urp.post_id " +
                        "inner join users as user " +
                        "on urp.user_id = user.id " +
                        "where post.id = ?" ;
        if(donationSelected != null) {
            btnDeleteDonationPost.setVisible(true);
            try {
                ps = MyConnection.getConnection().prepareStatement(query);
                ps.setInt(1, donationSelected.getId());
                rs = ps.executeQuery();

                while(rs.next()) { 
                    goalDonationField.setText(formatter.format(rs.getDouble(1)));
                    raiseDonationField.setText(formatter.format(rs.getDouble(2)));
                    tableModelDonation.addRow(new Object[] { 
                        rs.getString(3),
                        rs.getDouble(4),
                    });
                    peopleDonatedField.setText(String.valueOf(tableModelDonation.getRowCount()));
                }
            } catch (SQLException ex) {
                Logger.getLogger(ManageUserPost.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_comboBoxTitleDonationActionPerformed

    private void btnDeleteDonationPostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteDonationPostActionPerformed
        
        String itemSelected = (String) comboBoxTitleDonation.getSelectedItem();
        int indexItemSelected = comboBoxTitleDonation.getSelectedIndex();
        Donation donationSelected = findDonationSelected(listDonations, itemSelected);
        
        Statement st;
        String queryDeleteDonationPost = "delete from posts where id = " + donationSelected.getId();
        int result = 0;
        try {
            st = MyConnection.getConnection().createStatement();
            result = st.executeUpdate(queryDeleteDonationPost);
            if(result == 1) { 
                JOptionPane.showMessageDialog(null, "Xoá bài viết quyên góp thành công", "Delete donation post sucess", 2);
                comboBoxTitleDonation.removeItemAt(indexItemSelected);
            } else { 
                JOptionPane.showMessageDialog(null, "Xoá bài viết quyên góp thất bại", "Delete donation post failed", 2);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ManageUserPost.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeleteDonationPostActionPerformed

    private void comboBoxTitleVolunteerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxTitleVolunteerActionPerformed
        DecimalFormat formatter = new DecimalFormat("#,###");
        
        
        raisePeopleField.setText("0");
        String itemSelected = (String) comboBoxTitleVolunteer.getSelectedItem();
        
        DefaultTableModel tableModelVolunteer = (DefaultTableModel) tablePeopleVolunteerSignUp.getModel();
        tableModelVolunteer.setRowCount(0);
        
        DefaultTableModel tableModelTimeLine = (DefaultTableModel) tableTimeLine.getModel();
        tableModelTimeLine.setRowCount(0);
                
        PostVolunteer postVolunteerSelected = findPostVolunteerSelected(listPostVolunteers, itemSelected);
        goalPeopleField.setText(formatter.format(postVolunteerSelected.getGoalPeople()));
        
        
        PreparedStatement ps;
        ResultSet rs;
        String queryGetPostVolunteer = "select goal_people, raise_people, urp.user_id, full_name, has_evaluated " +
                                        "from posts as post " +
                                        "inner join user_ref_posts as urp " +
                                        "on post.id = urp.post_id " +
                                        "inner join users as user " +
                                        "on urp.user_id = user.id " +
                                        "where post.id = ?";
        if(postVolunteerSelected != null) { 
            btnDeletePostVolunteer.setVisible(true);
            try {
                ps = MyConnection.getConnection().prepareStatement(queryGetPostVolunteer);
                ps.setInt(1, postVolunteerSelected.getId());
                rs = ps.executeQuery();
                while(rs.next()) { 
                    goalPeopleField.setText(formatter.format(rs.getInt(1)));
                    raisePeopleField.setText(formatter.format(rs.getInt(2)));
                    tablePeopleVolunteerSignUp.getColumn("Đánh giá").setCellRenderer(new ButtonRenderer());
                    tablePeopleVolunteerSignUp.getColumn("Đánh giá").setCellEditor(new ButtonEditor(new JCheckBox()));
                    tableModelVolunteer.addRow(new Object[] { 
                        rs.getInt(3),
                        rs.getString(4),
                        rs.getInt(5) == 1 ? "Đã đánh giá" : "Đánh giá",
                    });
                }
            } catch (SQLException ex) {
                Logger.getLogger(ManageUserPost.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        String queryGetTimeLine = "select id, take_place, description, has_done " +
                                    "from time_lines " +
                                    "where pid = ?";
        
        try {
            ps = MyConnection.getConnection().prepareStatement(queryGetTimeLine);
            ps.setInt(1, postVolunteerSelected.getId());
            
            rs = ps.executeQuery();
            while(rs.next()) { 
                listTimeLines.add(new TimeLine(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getInt(4)));
                tableModelTimeLine.addRow(new Object[] { 
                    rs.getInt(1),
                    rs.getString(2),
                    rs.getString(3),
                    rs.getInt(4) == 1 ? true : false
                });
            }
        } catch (SQLException ex) {
            Logger.getLogger(ManageUserPost.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_comboBoxTitleVolunteerActionPerformed

    private void tablePeopleVolunteerSignUpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablePeopleVolunteerSignUpMouseClicked
        String itemSelected = (String) comboBoxTitleVolunteer.getSelectedItem();
        
        PostVolunteer postVolunteerSelected = findPostVolunteerSelected(listPostVolunteers, itemSelected);
        
        JTable  source = (JTable)evt.getSource();
        int row = source.rowAtPoint( evt.getPoint() );
        int column = source.columnAtPoint(evt.getPoint());
        
        String volunteerId = source.getModel().getValueAt(row, 0) + "";
        
        if(column == 2) { 
            EvaluateVolunteerForm evaluateVolunteerForm = new EvaluateVolunteerForm(user.getId(), Integer.parseInt(volunteerId), postVolunteerSelected.getId());
            evaluateVolunteerForm.setVisible(true);
            evaluateVolunteerForm.setLocationRelativeTo(null);
            evaluateVolunteerForm.pack();
            evaluateVolunteerForm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            this.dispose();
        }
    }//GEN-LAST:event_tablePeopleVolunteerSignUpMouseClicked

    private void tableTimeLineMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableTimeLineMouseClicked
        JTable  source = (JTable)evt.getSource();
        int row = source.rowAtPoint( evt.getPoint() );
        int column = source.columnAtPoint(evt.getPoint());
        
        String timeLineId = source.getModel().getValueAt(row, 0) + "";
        int option = JOptionPane.NO_OPTION;

        String hasDone = source.getModel().getValueAt(row, 3) + "";
        
        if(column == 3 && hasDone.equals("false")) { 
            option = JOptionPane.showOptionDialog(new JFrame(), "Sự kiện này đã hoàn thành ?", 
                "Chỉnh sửa sự kiện", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, 
                null, new Object[] {"Đã hoàn thành", "Chưa hoàn thành"}, JOptionPane.YES_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                PreparedStatement ps;
                String queryUpdateDoneTimeLine = "update time_lines set has_done = 1 where id = ?";
                try {
                    ps = MyConnection.getConnection().prepareStatement(queryUpdateDoneTimeLine);
                    ps.setInt(1, Integer.parseInt(timeLineId));

                    if(ps.executeUpdate() != 0 ) { 
                        JOptionPane.showMessageDialog(null, "Chỉnh sửa thời gian sự kiện thành công", "Update time line sucess", 2);
                        DefaultTableModel tableModelTimeLine = (DefaultTableModel) tableTimeLine.getModel();
                        tableModelTimeLine.setValueAt(true, row, 3);
                    } else { 
                        JOptionPane.showMessageDialog(null, "Chỉnh sửa thời gian sự kiện thất bại", "Update time line failed", 2);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(ManageUserPost.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        } else if (column == 3 && hasDone.equals("true")) { 
                option = JOptionPane.showOptionDialog(new JFrame(), "Sự kiện này chưa hoàn thành ?", 
                "Chỉnh sửa sự kiện", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, 
                null, new Object[] {"Chưa hoàn thành", "Đã hoàn thành"}, JOptionPane.YES_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                PreparedStatement ps;
                String queryUpdateDoneTimeLine = "update time_lines set has_done = 0 where id = ?";
                try {
                    ps = MyConnection.getConnection().prepareStatement(queryUpdateDoneTimeLine);
                    ps.setInt(1, Integer.parseInt(timeLineId));

                    if(ps.executeUpdate() != 0 ) { 
                        JOptionPane.showMessageDialog(null, "Chỉnh sửa thời gian sự kiện thành công", "Update time line sucess", 2);
                        DefaultTableModel tableModelTimeLine = (DefaultTableModel) tableTimeLine.getModel();
                        tableModelTimeLine.setValueAt(false, row, 3);
                    } else { 
                        JOptionPane.showMessageDialog(null, "Chỉnh sửa thời gian sự kiện thất bại", "Update time line failed", 2);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(ManageUserPost.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }
         
        return;
    }//GEN-LAST:event_tableTimeLineMouseClicked

    private void btnDeletePostVolunteerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePostVolunteerActionPerformed
        String itemSelected = (String) comboBoxTitleVolunteer.getSelectedItem();
        int indexItemSelected = comboBoxTitleVolunteer.getSelectedIndex();
        
        PostVolunteer postVolunteerSelected = findPostVolunteerSelected(listPostVolunteers, itemSelected);
        
        Statement st;
        String queryDeletePostVolunteer = "delete from posts where id = " + postVolunteerSelected.getId();
        int result = 0;
        try {
            st = MyConnection.getConnection().createStatement();
            result = st.executeUpdate(queryDeletePostVolunteer);
            if(result == 1) { 
                JOptionPane.showMessageDialog(null, "Xoá bài viết tình nguyện thành công", "Delete volunteer post sucess", 2);
                comboBoxTitleVolunteer.removeItemAt(indexItemSelected);
            } else { 
                JOptionPane.showMessageDialog(null, "Xoá bài viết tình nguyện thất bại", "Delete volunteer post failed", 2);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ManageUserPost.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeletePostVolunteerActionPerformed

    private void comboBoxDirectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxDirectionActionPerformed
        int index = comboBoxDirection.getSelectedIndex();

        if(index == 0) { 
            ProfileForm profileForm = new ProfileForm(user.getId(), "");
            profileForm.setVisible(true);
            profileForm.pack();
            profileForm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            this.dispose();
        } else if (index == 1) { 
            CreatePost createPostForm = new CreatePost(user.getId());
            createPostForm.setVisible(true);
            createPostForm.pack();
            createPostForm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            this.dispose();
        } else { 
            LoginForm loginForm = new LoginForm();
            loginForm.setVisible(true);
            loginForm.pack();
            loginForm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            this.dispose();
        }
    }//GEN-LAST:event_comboBoxDirectionActionPerformed

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        AboutForm aboutForm = new AboutForm(user.getId());
        aboutForm.setVisible(true);
        aboutForm.setLocationRelativeTo(null);
        aboutForm.pack();
        aboutForm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        Home home = new Home(user.getId());
        home.setVisible(true);
        home.setLocationRelativeTo(null);
        home.pack();
        home.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_jLabel2MouseClicked

    /**
     * @param args the command line arguments
     */
    public void loadTitleVolunteer() { 
        String queryTitleVolunteer = "select post.id, title, goal_people from posts as post " +
                                    "inner join users as user " +
                                    "on post.user_id = user.id " +
                                    "where goal_people > 0 and user.id = " + user.getId();
        
        Statement st;
        ResultSet rs;
        
        try {
            st = MyConnection.getConnection().createStatement();
            rs = st.executeQuery(queryTitleVolunteer);
            
            while(rs.next()) { 
                PostVolunteer postVolunteer = new PostVolunteer(rs.getInt(1), rs.getString(2), rs.getDouble(3));
                listPostVolunteers.add(postVolunteer);
            }
            for (PostVolunteer postVolunteer : listPostVolunteers) {
                comboBoxTitleVolunteer.addItem(postVolunteer.getTitle());
            }
        } catch (SQLException ex) {
            Logger.getLogger(ManageUserPost.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void loadTitleDonation() { 
        String queryTitleDonation = "select post.id, title, goal_money from posts as post " +
                                    "inner join users as user " +
                                    "on post.user_id = user.id " +
                                    "where goal_money > 0 and user.id = " + user.getId();
        Statement st;
        ResultSet rs;
        try {
            st = MyConnection.getConnection().createStatement();
            rs = st.executeQuery(queryTitleDonation);
            while(rs.next()) { 
                Donation donation = new Donation(rs.getInt(1),rs.getString(2), rs.getDouble(3));
                listDonations.add(donation);
            }
            for (Donation donation : listDonations) {
                    comboBoxTitleDonation.addItem(donation.getTitle());
            }
            return;
        } catch (SQLException ex) {
            Logger.getLogger(ManageUserPost.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void loadInfoUser(int userId) { 
        PreparedStatement st;
        ResultSet rs;
        String query = "select id, full_name, username, email, gender, is_admin, avatar, status from users where id = ?";
        
        try {
            st = MyConnection.getConnection().prepareStatement(query);
            if(userId != 0) { 
                st.setString(1, String.valueOf(userId));
            }
            rs = st.executeQuery();
            
            if(rs.next()) { 
                user = new User(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getInt(5), rs.getString(6), rs.getBlob(7), rs.getInt(8));
            } else { 
                LoginForm loginForm = new LoginForm();
                loginForm.setVisible(true);
                loginForm.pack();
                loginForm.setLocationRelativeTo(null);
                loginForm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                this.dispose();
            }
        } catch (SQLException ex) {
            Logger.getLogger(ProfileForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public  void loadLogo() { 
        File logo = new File(System.getProperty("user.dir") + "/src/images/logo.jpg");
        String path = logo.getAbsolutePath();
        ImageIcon myImage = new ImageIcon(path);
        
        Image image = myImage.getImage();
        Image newImage = image.getScaledInstance(labelLogo.getWidth(), labelLogo.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon imageIcon = new ImageIcon(newImage);
        labelLogo.setIcon(imageIcon);
    }
    public Donation findDonationSelected(ArrayList<Donation> donations, String title) { 
        for (Donation donation : donations) {
            if(donation.getTitle().equals(title)) { 
                return donation;
            }
        }
        return null;
    }

    public PostVolunteer findPostVolunteerSelected(ArrayList<PostVolunteer> postVolunteers, String title) { 
        for (PostVolunteer postVolunteer : postVolunteers) {
            if(postVolunteer.getTitle().equals(title)) { 
                return postVolunteer;
            }
        }
        return null;
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageUserPost.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageUserPost.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageUserPost.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageUserPost.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageUserPost(user.getId()).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteDonationPost;
    private javax.swing.JButton btnDeletePostVolunteer;
    private javax.swing.JComboBox<String> comboBoxDirection;
    private javax.swing.JComboBox<String> comboBoxTitleDonation;
    private javax.swing.JComboBox<String> comboBoxTitleVolunteer;
    private javax.swing.JTextField goalDonationField;
    private javax.swing.JTextField goalPeopleField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel labelLogo;
    private javax.swing.JPanel panelHeader;
    private javax.swing.JPanel panelMain;
    private javax.swing.JTextField peopleDonatedField;
    private javax.swing.JTextField raiseDonationField;
    private javax.swing.JTextField raisePeopleField;
    private javax.swing.JTable tableDonation;
    private javax.swing.JTable tablePeopleVolunteerSignUp;
    private javax.swing.JTable tableTimeLine;
    // End of variables declaration//GEN-END:variables
}
